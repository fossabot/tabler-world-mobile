service: tabler-world-api

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts
  - serverless-dynamodb-local
  - serverless-domain-manager
  - serverless-offline
  - serverless-webpack

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

  webpack:
    keepOutputDirectory: true
    includeModules:
      forceExclude:
        - aws-sdk

  cache_table: tablerworld-gqlqc-${self:custom.stage}
  sqs: tablerworld-cacheupdates-${self:custom.stage}
  email: ${env:ALERT_EMAIL}
  sqs_geo: tablerworld-geocode-${self:custom.stage}

  domainname: ${self:custom.stage}-api.app.roundtable.world
  demo_api_key: ${env:DEMO_API_KEY}

  # import schedule
  cron_rate:
    dev: rate(24 hours)
    test: rate(12 hours)
    prod: rate(4 hours)

  cron_enabled:
    dev: false
    test: true
    prod: true

  # api throtteling
  throttle:
    dev:
      burstLimit: 10
      rateLimit: 5

    test:
      burstLimit: 40
      rateLimit: 20

    prod:
      burstLimit: 200
      rateLimit: 100

  # warmer for database access
  warm_enabled:
    dev: false
    test: false
    prod: true

  bundle:
    dev: false
    test: true
    prod: true

  # SNS topics to check env
  alerts:
    stages:
      - test
      - prod

    topics:
      alarm:
        topic: ${self:service}-${self:custom.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${self:custom.email}

    alarms:
      - functionErrors
      - processTimeouts

    definitions:
      processTimeouts:
        metric: processTimeouts
        threshold: 0
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'Process exited before completing'

  # debug mode
  dynamodb:
    noStart: false
    start:
      # host: localhost
      port: 8000
      sharedDb: true
      migrate: true
      seed: false
      inMemory: true
    stages:
      - dev

  # domain
  customDomain:
    domainName: ${self:custom.domainname}
    certificateName: '*.app.roundtable.world'
    createRoute53Record: true
    endpointType: 'regional'

# we want seperate files to minimize depenencies in files
package:
  individually: ${self:custom.bundle.${self:custom.stage}}

provider:
  name: aws
  stage: dev
  region: eu-west-1

  runtime: nodejs10.x

  memorySize: 128
  versionFunctions: true

  tracing:
    apiGateway: true

  # allow to redefine variables for debug purposes
  environment:
    ${file(serverless.env.yml):${self:custom.stage}}

  apiKeys:
    - app:
      - name: tabler-world-api-lambda-authorizer-${self:custom.stage}
        # this is hardcoded also in code, move?
        value: tabler-world-api-lambda-authorizer-${self:custom.stage}

    - demo:
      - name: tabler-world-demo-${self:custom.stage}
        value: ${self:custom.demo_api_key}

  apiGateway:
    minimumCompressionSize: 1024
    apiKeySourceType: AUTHORIZER

  # Limited by API Keys
  usagePlan:
    - app:
        throttle:
          burstLimit: ${self:custom.throttle.${self:custom.stage}.burstLimit}
          rateLimit: ${self:custom.throttle.${self:custom.stage}.rateLimit}

    - demo:
        throttle:
          burstLimit: ${self:custom.throttle.${self:custom.stage}.burstLimit}
          rateLimit: ${self:custom.throttle.${self:custom.stage}.rateLimit}

  vpc:
    securityGroupIds:
      - Fn::ImportValue: DatabaseSecurityGroupId
    subnetIds:
      - Fn::ImportValue: DatabaseSubnetAId
      - Fn::ImportValue: DatabaseSubnetBId
      - Fn::ImportValue: DatabaseSubnetCId

  # global role definition
  iamRoleStatements:
    # allow database access
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:lambda:"
            - ${self:provider.region}
            - ":"
            - Ref: "AWS::AccountId"
            - ":function:"
            - "tabler-world-api-"
            - ${self:custom.stage}
            - "-data-service"

    # read parameters from SSM
    - Effect: Allow
      Action:
        - ssm:GetParameters
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - ${self:provider.region}
            - ":"
            - Ref: "AWS::AccountId"
            - ":parameter*/"
            - ${self:custom.stage}
            - "/*"

    # - Effect: Allow
    #   Action:
    #     - rds-db:connect
    #   Resource:
    #     # arn:aws:rds-db:region:account-id:dbuser:DbiResourceId/db-user-name
    #     # https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html
    #     Fn::Join:
    #       - ""
    #       - - "arn:aws:rds-db:"
    #         - ${self:provider.region}
    #         - ":"
    #         - Ref: "AWS::AccountId"
    #         - ":dbuser:"
    #         - "*/"
    #         - ${self:custom.db_user}

    # tracing AWSXrayWriteOnlyAccess
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - xray:GetSamplingRules
        - xray:GetSamplingTargets
        - xray:GetSamplingStatisticSummaries

      Resource:
        - "*"

functions:
  #
  # Update database
  #
  database-update:
    handler: src/sql/lambda.handler
    timeout: 600

    environment:
      db_role: tw_read_${self:custom.stage}
      XRAY_DISABLED: true

  #
  # data-service
  #
  data-service:
    handler: src/dataservice/lambda.handler
    timeout: 30
    tracing: Active

    environment:
      db_role: tw_read_${self:custom.stage}

    events:
      - schedule:
          name: warm-tabler-world-tabler-data-service-${self:custom.stage}
          rate: rate(15 minutes)
          enabled: ${self:custom.warm_enabled.${self:custom.stage}}
          input:
            warmer: true
            concurrency: 1

  #
  # Import reader
  #
  import-reader:
    handler: src/schedule/reader.handler
    timeout: 600

    environment:
      sqs_queue:
        Ref: ReadUpdatesQueue
      XRAY_DISABLED: true

    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:SendMessageBatch
        Resource:
          Fn::GetAtt:
            - ReadUpdatesQueue
            - Arn

    events:
      - schedule:
          name: update-tabler-world-tabler-${self:custom.stage}
          description: Updates contact data from TABLER.WORLD

          rate: ${self:custom.cron_rate.${self:custom.stage}}
          enabled: ${self:custom.cron_enabled.${self:custom.stage}}

          input:
            mode: incremental
            type: tabler

      - schedule:
          name: update-tabler-world-clubs-${self:custom.stage}
          description: Updates contact data from TABLER.WORLD

          rate: rate(24 hours)
          enabled: ${self:custom.cron_enabled.${self:custom.stage}}

          input:
            mode: full
            type: clubs

  #
  # Cache update
  #
  cache-update:
    handler: src/schedule/cacheUpdate.handler
    timeout: 10
    memorySize: 128
    reservedConcurrency: 3

    environment:
      cache_table: ${self:custom.cache_table}
      XRAY_DISABLED: true
      geocode_queue:
        Ref: EncodeAddressQueue

    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem

        Resource:
          - "Fn::GetAtt": [ graphqlsqTable, Arn ]

      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:SendMessageBatch
        Resource:
          Fn::GetAtt:
            - EncodeAddressQueue
            - Arn

    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ReadUpdatesQueue
              - Arn


  #
  # Cache update
  #
  geocode:
    handler: src/geo/lambda.handler
    timeout: 120 # batchSize 1, elements 10
    memorySize: 128
    reservedConcurrency: 1

    environment:
      XRAY_DISABLED: true
      geo_agent: ${self:custom.geo_agent}
      geo_email: ${self:custom.geo_email}
      sqs_arn:
        Fn::GetAtt:
          - EncodeAddressQueue
          - Arn

    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:ListEventSourceMappings
          - lambda:UpdateEventSourceMapping
        Resource: "*"

    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EncodeAddressQueue
              - Arn
          batchSize: 1

  #
  # Send push notifications
  #
  send-notifications:
    handler: src/notifications/send.handler
    timeout: 600

    environment:
      XRAY_DISABLED: true

    events:
      # - http:
      #     path: send-notifications
      #     method: get
      #     cors: true
      - schedule:
          name: send-tabler-world-notifications-${self:custom.stage}
          description: Sends push notifications from TABLER.WORLD

          ## 07 UTC => 9 GMT+2
          rate: cron(0 07 * * ? *)
          enabled: ${self:custom.cron_enabled.${self:custom.stage}}

  #
  # Check push notifications
  #
  check-notifications:
    handler: src/notifications/check.handler
    timeout: 600

    environment:
      XRAY_DISABLED: true

    events:
      # - http:
      #     path: check-notifications
      #     method: get
      #     cors: true
      - schedule:
          name: check-tabler-world-notifications-${self:custom.stage}
          description: Checks delivery status of push notifications

          rate: rate(6 hours)
          enabled: ${self:custom.cron_enabled.${self:custom.stage}}

  #
  # graphql Demo
  #
  graphql-demo:
    handler: src/graphql/lambda-mock.handler
    timeout: 15
    memorySize: 128
    tracing: Active

    vpc:
      securityGroupIds: []
      subnetIds: []

    events:
        - http:
            path: graphql-demo
            method: post
            authorizer:
              type: CUSTOM
              authorizerId:
                Ref: CustomApiGatewayAuthorizer
            cors: true
            private: true

  #
  # graphql
  #
  graphql:
    handler: src/graphql/lambda.handler
    timeout: 30
    memorySize: 256
    tracing: Active

    vpc:
      securityGroupIds: []
      subnetIds: []

    environment:
      # remote
      cache_table: ${self:custom.cache_table}

    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem

        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource:
          - "Fn::GetAtt": [ graphqlsqTable, Arn ]

    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              Ref: CustomApiGatewayAuthorizer
          private: true

      - http:
          path: graphql
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              Ref: CustomApiGatewayAuthorizer
          private: true


resources:
  Resources:
    graphqlsqTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.cache_table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

        KeySchema:
          - AttributeName: id
            KeyType: HASH

        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    ReadUpdatesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs}
        MessageRetentionPeriod: 1209600
        # 6 times lambda timeout
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - ReadUpdatesQueueDeadLetters
              - Arn
          maxReceiveCount: 5

    ReadUpdatesQueueDeadLetters:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs}-dead
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 0

    EncodeAddressQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs_geo}
        MessageRetentionPeriod: 1209600
        # 6 times lambda timeout
        VisibilityTimeout: 720
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - EncodeAddressQueueDeadLetters
              - Arn
          maxReceiveCount: 5

    EncodeAddressQueueDeadLetters:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs_geo}-dead
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 0

    GeocodeLogGroup:
      Properties:
        RetentionInDays: "7"

    CacheDashupdateLogGroup:
      Properties:
        RetentionInDays: "7"

    SendDashnotificationsLogGroup:
      Properties:
        RetentionInDays: "7"

    CheckDashnotificationsLogGroup:
      Properties:
        RetentionInDays: "7"

    ImportDashreaderLogGroup:
      Properties:
        RetentionInDays: "7"

    GraphqlDashdemoLogGroup:
      Properties:
        RetentionInDays: "7"

    GraphqlLogGroup:
      Properties:
        RetentionInDays: "14"

    DataDashserviceLogGroup:
      Properties:
        RetentionInDays: "14"

    DatabaseDashupdateLogGroup:
      Properties:
        RetentionInDays: "7"

    LambdaPermissionAuthorizerApiGateway:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::ImportValue: AuthorizerArn-${self:custom.stage}
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com

    # https://docs.amazonaws.cn/en_us/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html
    CustomApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: lambda-${self:custom.stage}
        IdentitySource: method.request.header.Authorization
        AuthorizerResultTtlInSeconds: 3600
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: TOKEN
        AuthorizerUri:
         Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::ImportValue: AuthorizerArn-${self:custom.stage}
            - "/invocations"

  Outputs:
    ApiUrl:
      Value: ${self:custom.domainname}
      Export:
        Name: ApiUrl-${self:custom.stage}

    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ApiGatewayRestApiId-${self:custom.stage}

    ApiGatewayRestApiRootResourceId:
      Value:
         Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ApiGatewayRestApiRootResourceId-${self:custom.stage}

    ApiArn:
      Value:
        Fn::GetAtt:
          # functions are renamed acording to https://github.com/serverless/serverless/blob/master/docs/providers/aws/guide/resources.md
          - GraphqlLambdaFunction
          - Arn
      Export:
        Name: ApiArn-${self:custom.stage}
